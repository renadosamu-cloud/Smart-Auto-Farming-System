-- ======================================================================================
-- Smart Auto-Farming System (All-in-One, Stable Version)
-- ======================================================================================

repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer

-- Services
local player = game:GetService("Players").LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local uis = game:GetService("UserInputService")
local playerGui = player:WaitForChild("PlayerGui")
local workspace = game:GetService("Workspace")
local http = game:GetService("HttpService")

-- CONFIG
local RESTART_WAVE = 50
local AUTO_RESTART_INTERVAL = 6 * 60
local MAX_RETRY_COUNT = 3

-- SETTINGS FILE
local folderPath = "VectorHub"
local gameFolderPath = folderPath .. "/Laststand/"
local filePath = gameFolderPath .. player.Name .. ".json"

_G.Settings = {
    AutoCard = true,
    AutoAbility = true,
    HalloweenP1 = false,
    HalloweenP2 = false,
    LastWave = 0,
    LastRestart = os.clock()
}

-- Card Priority
local cardPriority = {
    ["Weakened Resolve I"] = 13, ["Weakened Resolve II"] = 11, ["Weakened Resolve III"] = 4,
    ["Fog of War I"] = 12, ["Fog of War II"] = 10, ["Fog of War III"] = 5,
    ["Lingering Fear I"] = 6, ["Lingering Fear II"] = 2,
    ["Power Reversal I"] = 14, ["Power Reversal II"] = 9,
    ["Greedy Vampire's"] = 8, ["Hellish Gravity"] = 3, ["Deadly Striker"] = 7,
    ["Critical Denial"] = 1, ["Trick or Treat Coin Flip"] = 15,
    ["Devil's Sacrifice"] = 999, ["Bullet Breaker I"] = 999, ["Bullet Breaker II"] = 999, ["Bullet Breaker III"] = 999,
    ["Hell Merchant I"] = 999, ["Hell Merchant II"] = 999, ["Hell Merchant III"] = 999,
    ["Hellish Warp I"] = 999, ["Hellish Warp II"] = 999,
    ["Fiery Surge I"] = 999, ["Fiery Surge II"] = 999,
    ["Grevious Wounds I"] = 999, ["Grevious Wounds II"] = 999,
    ["Scorching Hell I"] = 999, ["Scorching Hell II"] = 999,
    ["Fortune Flow"] = 999, ["Soul Link"] = 999,
}

-- Utility
local function notify(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title; Text = text; Duration = 3;})
    end)
end

local function LoadSettings()
    if not isfolder(folderPath) then makefolder(folderPath) end
    if not isfolder(gameFolderPath) then makefolder(gameFolderPath) end
    if not isfile(filePath) then
        writefile(filePath, http:JSONEncode(_G.Settings))
    else
        local success, data = pcall(function()
            return http:JSONDecode(readfile(filePath))
        end)
        if success and type(data) == "table" then
            for i, v in pairs(data) do
                _G.Settings[i] = v
            end
        end
    end
end

local function SaveSettings()
    writefile(filePath, http:JSONEncode(_G.Settings))
end

-- Seamless Retry
local Settings = playerGui:WaitForChild("Settings")
local SV = Settings:WaitForChild("SeamlessRetry")
local restartRemote = rs.Remotes:FindFirstChild("RestartMatch")
local setSettingsRemote = rs.Remotes:FindFirstChild("SetSettings")
local abilityRemote = rs.Remotes:FindFirstChild("Ability")

local matchCount = 0
local hasRestarted = false
local lastAutoRestart = os.clock()
local isSelectingCard = false

local function setSeamlessRetry(state)
    if setSettingsRemote and SV then
        setSettingsRemote:InvokeServer("SeamlessRetry", state)
        SV.Value = state
    end
end

if not SV.Value then
    setSeamlessRetry(true)
    notify("Seamless Retry", "Enabled")
end

-- Auto Restart Logic
local function getWaveLabel()
    local ok, label = pcall(function()
        return player.PlayerGui.MainUI.Top.Wave.Value
    end)
    return ok and label or nil
end

local function restartGame()
    if not hasRestarted then
        hasRestarted = true
        setSeamlessRetry(false)
        restartRemote:FireServer()
        task.wait(5)
        hasRestarted = false
        lastAutoRestart = os.clock()
        setSeamlessRetry(true)
        matchCount = 0
        notify("Restart Complete", "New round started. Seamless Retry Enabled.")
    end
end

local function checkWave()
    local waveLabel = getWaveLabel()
    if not waveLabel then return end
    local currentWave = tonumber(waveLabel.Text)
    if currentWave and currentWave >= RESTART_WAVE then
        restartGame()
    end
end

-- Auto Restart by Time
task.spawn(function()
    while task.wait(10) do
        local waveLabel = getWaveLabel()
        if waveLabel and os.clock() - lastAutoRestart >= AUTO_RESTART_INTERVAL then
            restartGame()
        end
    end
end)

-- Watch Wave for Auto Restart (สร้าง connection ครั้งเดียว)
local waveLabel = getWaveLabel()
local waveConnection
if waveLabel then
    if waveConnection then waveConnection:Disconnect() end
    waveConnection = waveLabel:GetPropertyChangedSignal("Text"):Connect(checkWave)
end

-- Watch EndGameUI for Match Count (สร้าง connection ครั้งเดียว)
local childAddedConnection
if childAddedConnection then childAddedConnection:Disconnect() end
childAddedConnection = playerGui.ChildAdded:Connect(function(c)
    if c.Name == "EndGameUI" then
        matchCount = matchCount + 1
        notify("Match Finished", "Game Count: " .. matchCount .. "/" .. MAX_RETRY_COUNT)
        c.AncestryChanged:Wait()
        if matchCount >= MAX_RETRY_COUNT then
            notify("Waiting", "Waiting 10s before restart")
            restartGame()
        end
    end
end)

-- Card Selection Logic
local function getAvailableCards()
    local prompt = playerGui:FindFirstChild("Prompt")
    if not prompt then return nil end
    local frame = prompt:FindFirstChild("Frame")
    if not frame then return nil end
    local cards = {}
    for _, descendant in ipairs(frame:GetDescendants()) do
        if descendant:IsA("TextLabel") and cardPriority[descendant.Text] then
            local button = descendant.Parent
            while button and not (button:IsA("GuiButton") or button:IsA("TextButton") or button:IsA("ImageButton")) do
                button = button.Parent
            end
            if button then
                table.insert(cards, {name = descendant.Text, button = button})
            end
        end
    end
    return #cards > 0 and cards or nil
end

local function findBestCard(availableCards)
    local bestIndex = 1
    local bestPriority = math.huge
    for cardIndex = 1, #availableCards do
        local cardData = availableCards[cardIndex]
        local priority = cardPriority[cardData.name] or 999
        if priority < bestPriority then
            bestPriority = priority
            bestIndex = cardIndex
        end
    end
    return availableCards[bestIndex]
end

local function pressConfirmButton()
    local prompt = playerGui:FindFirstChild("Prompt")
    if not prompt then return false end
    local frame = prompt:FindFirstChild("Frame")
    if not frame then return false end
    local innerFrame = frame:FindFirstChild("Frame")
    if not innerFrame then return false end
    local children = innerFrame:GetChildren()
    if #children < 5 then return false end
    local button = children[5]:FindFirstChild("TextButton")
    if button and button:FindFirstChild("TextLabel") and button.TextLabel.Text == "Confirm" then
        pcall(function()
            for _, conn in ipairs(getconnections(button.MouseButton1Click)) do
                conn:Fire()
            end
        end)
        return true
    end
    return false
end

local function selectCard()
    if not _G.Settings.AutoCard or isSelectingCard then return end
    isSelectingCard = true
    local availableCards = getAvailableCards()
    if not availableCards then isSelectingCard = false return end
    local bestCardData = findBestCard(availableCards)
    if bestCardData and bestCardData.button then
        pcall(function()
            for _, conn in ipairs(getconnections(bestCardData.button.MouseButton1Click)) do
                conn:Fire()
            end
        end)
        task.wait(0.2)
        pressConfirmButton()
    end
    isSelectingCard = false
end

-- Auto Ability Logic
task.spawn(function()
    while task.wait(1) do
        if _G.Settings.AutoAbility then
            local waveLabel = getWaveLabel()
            local currentWave = waveLabel and tonumber(waveLabel.Text)
            if currentWave and currentWave >= RESTART_WAVE then
                local towers = workspace:FindFirstChild("Towers")
                local enemies = workspace:FindFirstChild("Enemies")
                if towers and enemies then
                    for _, enemy in pairs(enemies:GetChildren()) do
                        if enemy.Name == "Boss" then
                            local args1 = {towers:FindFirstChild("LelouchEvo"), "Submission"}
                            local args2 = {towers:FindFirstChild("LelouchEvo"), "All of you, Die!"}
                            local args3 = {towers:FindFirstChild("AsuraEvo"), "Lines of Sanzu"}
                            if args1[1] then abilityRemote:InvokeServer(unpack(args1)) end
                            if args2[1] then abilityRemote:InvokeServer(unpack(args2)) end
                            if args3[1] then abilityRemote:InvokeServer(unpack(args3)) end
                        end
                    end
                end
            end
        end
        selectCard()
    end
end)

-- Event UI & Toggle
local gui = Instance.new("ScreenGui")
gui.Name = "HalloweenToggleGUI"
gui.ResetOnSpawn = false
gui.Parent = playerGui

local p1Button = Instance.new("TextButton")
p1Button.Size = UDim2.new(0, 180, 0, 40)
p1Button.Position = UDim2.new(0, 10, 0, 10)
p1Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
p1Button.TextColor3 = Color3.fromRGB(255, 255, 255)
p1Button.TextSize = 18
p1Button.Font = Enum.Font.GothamBold
p1Button.Parent = gui

local p2Button = Instance.new("TextButton")
p2Button.Size = UDim2.new(0, 180, 0, 40)
p2Button.Position = UDim2.new(0, 10, 0, 60)
p2Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
p2Button.TextColor3 = Color3.fromRGB(255, 255, 255)
p2Button.TextSize = 18
p2Button.Font = Enum.Font.GothamBold
p2Button.Parent = gui

local function updateP1()
    if _G.Settings.HalloweenP1 then
        p1Button.BackgroundColor3 = Color3.fromRGB(0, 180, 90)
        p1Button.Text = "P1: ON"
    else
        p1Button.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
        p1Button.Text = "P1: OFF"
    end
end

local function updateP2()
    if _G.Settings.HalloweenP2 then
        p2Button.BackgroundColor3 = Color3.fromRGB(0, 180, 90)
        p2Button.Text = "P2: ON"
    else
        p2Button.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
        p2Button.Text = "P2: OFF"
    end
end

local function startP1()
    if game.PlaceId == 12886143095 or game.PlaceId == 18583778121 then
        rs:WaitForChild("Events"):WaitForChild("Hallowen2025"):WaitForChild("Enter"):FireServer()
        task.wait(3)
        rs:WaitForChild("Events"):WaitForChild("Hallowen2025"):WaitForChild("Start"):FireServer()
    end
end

local function startP2()
    if game.PlaceId == 12886143095 or game.PlaceId == 18583778121 then
        rs:WaitForChild("Events"):WaitForChild("Hallowen2025"):WaitForChild("Enter"):FireServer("Hallowen2025_P2")
        task.wait(3)
        rs:WaitForChild("Events"):WaitForChild("Hallowen2025"):WaitForChild("Start"):FireServer("Hallowen2025_P2")
    end
end

local function toggleP1()
    _G.Settings.HalloweenP1 = not _G.Settings.HalloweenP1
    SaveSettings()
    updateP1()
    if _G.Settings.HalloweenP1 then startP1() end
end

local function toggleP2()
    _G.Settings.HalloweenP2 = not _G.Settings.HalloweenP2
    SaveSettings()
    updateP2()
    if _G.Settings.HalloweenP2 then startP2() end
end

p1Button.MouseButton1Click:Connect(toggleP1)
p2Button.MouseButton1Click:Connect(toggleP2)

uis.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.PageUp then
        toggleP1()
    elseif input.KeyCode == Enum.KeyCode.PageDown then
        toggleP2()
    end
end)

updateP1()
updateP2()

if _G.Settings.HalloweenP1 then task.defer(startP1) end
if _G.Settings.HalloweenP2 then task.defer(startP2) end

LoadSettings()
notify("System Loaded", "Smart Auto-Farming System is Active!")
